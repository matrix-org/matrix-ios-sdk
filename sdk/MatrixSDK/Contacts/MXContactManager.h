/*
 Copyright 2014 OpenMarket Ltd

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "MXSession.h"

#import "MXContactSource.h"

/**
 Notifications sent via the NSNotificationCenter when there has been an update
 in the MXContactManager.
 The object passed is an array of MXContactManagerId of contacts who have changed.
 */
FOUNDATION_EXPORT NSString *const kMXContactManagerUpdateNotification;


/**
 A MXContactId is an id generated by the MXContactManager to uniquely identify
 a contact managed by this manager.
 This id has no meaning in the original MXContactSource.
 */
typedef NSString* MXContactManagerId;


/**
 `MXContactManager` is an optional component in the Matrix iOS SDK that allows to serve
 contacts data to the application.
 
 `MXContactManager` reads contacts, modelised by the `MXContact` class, from `MXContactSource` 
 implementations.
 The `MXContactManager` user is free to use as many MXContactSources he wants. He can also use
 his own MXContactSource implementation.
 
 The `MXContact` class provides few but uniform data accross different contact sources.
 */
@interface MXContactManager : NSObject

/**
 Initialise the instance with a Matrix session.

 @param mxSession the Matrix session.
 @return the new instance.
 */
- (instancetype)initWithMatrixSession:(MXSession*)mxSession;

/**
 Add a source of contacts to the contact manager.

 The methods must called before loadContacts.

 The order of adding is important since in case of duplicated information, the value in the 
 first added MXContactSource will be taken into account first.
 
 @param contactSource an implementation of MXContactSource.
 */
- (void)addSource:(id<MXContactSource>)contactSource;

/**
 Make the MXContactManages load contacts from all MXContactSource implementations.

 @param success A block object called when the operation succeeds.
 @param failure A block object called when the operation fails.
 */
- (void)loadContacts:(void (^)())success failure:(void (^)(NSError *error))failure;

/**
 Returns the MXContacts provided by all MXContactSource implementations.

 Note that in case of any kind of contact duplication, the MXContactManager can merge the 
 MXContacts data provided by the contact sources. @see addSource for the priority policy.
 */
@property (nonatomic, readonly, copy) NSArray *contacts;

/**
 Retrieve a contact by its MXContactId.
 
 @param mxContactId the id of the MXContact to look for.
 @return the MXContact object. nil if not found.
 */
- (MXContact*)contactWithMXContactManagerId:(MXContactManagerId)mxContactManagerId;

@end
